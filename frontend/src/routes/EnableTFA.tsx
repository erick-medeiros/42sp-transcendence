import { useContext, useEffect, useState } from "react";
import { useFetcher, useLoaderData } from "react-router-dom";
import { Alert, Button, Card, Input, Typography } from "../components";
import { FiLock } from "react-icons/fi";
import { AuthContext } from "../contexts";

type EnableTfaLoaderData = {
  secret: string;
  qrCode: string;
};

const EnableTFA = () => {
  const fetcher = useFetcher();
  const { currentUser, setCurrentUser } = useContext(AuthContext);
  const { secret, qrCode } = useLoaderData() as EnableTfaLoaderData;
  const [tfaCode, setTfaCode] = useState("");
  const [recoveryCodes, setRecoveryCodes] = useState([]);

  console.log("fetcher.state", fetcher.state);
  console.log("fetcher.data", fetcher.data);
  console.log("fetcher.json", fetcher.json);

  useEffect(() => {
    if (fetcher.data && fetcher.data.status === "success") {
      setCurrentUser({
        ...currentUser,
        tfaEnabled: true,
      });
      setRecoveryCodes(fetcher.data.recoveryCodes);
    }
  }, [fetcher.data, setCurrentUser, currentUser]);

  if (recoveryCodes.length > 0) {
    return (
      <div className="h-full grid justify-center items-center">
        <div className="max-w-md">
          {fetcher.data && fetcher.data.message && (
            <Alert severity={fetcher.data.status} className="w-full mb-2">
              {fetcher.data.message.toString()}
            </Alert>
          )}
          <Card>
            <Card.Title>
              <Typography variant="h6">Two Factor Authentication</Typography>
            </Card.Title>
            <Card.Body position="left">
              <Typography variant="md">
                These are recovery codes in case you lose access to your
                authentication app:
              </Typography>
              <Typography variant="md" className="list-disc list-inside">
                {recoveryCodes.map((code) => (
                  <li key={code}>{code}</li>
                ))}
              </Typography>
              <Typography variant="md" customWeight="bold" className="mt-4">
                Store them safely, as they won't be displayed again.
              </Typography>
            </Card.Body>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="h-full grid justify-center items-center">
      <div className="max-w-md">
        {fetcher.data && fetcher.data.status === "error" && (
          <Alert severity="error" className="w-full mb-2">
            {fetcher.data.message.toString()}
          </Alert>
        )}
        <Card>
          <Card.Title>
            <Typography variant="h6">Two Factor Authentication</Typography>
          </Card.Title>
          <Card.Body className="!px-10 pb-5">
            <div className="inline-block">
              <img
                src={`data:image/png;base64,${qrCode}`}
                alt="QR Code"
                style={{}}
              />
            </div>
            <Typography variant="md" className="text-left mb-4">
              Use your authentication app to scan the QR code above, or enter
              the code manually:
              <strong>
                <code> {secret}</code>
              </strong>
            </Typography>
            <fetcher.Form method="POST">
              <Input
                type="text"
                LeadingIcon={<FiLock />}
                helperText="Enter the  code generated by your authentication app"
                placeholder=""
                name="tfaCode"
                value={tfaCode}
                onChange={(e) => setTfaCode(e.target.value)}
                required={true}
              />
              <div className="flex justify-center mt-4">
                <Button variant="primary" type="submit" className="px-10">
                  Enable
                </Button>
              </div>
            </fetcher.Form>
          </Card.Body>
        </Card>
      </div>
    </div>
  );
};

export default EnableTFA;
